name: complex benchmark
agents:
  client1: benchuser@benchclient1.perf.lab.eng.rdu.redhat.com:22
  client2: benchuser@benchclient2.perf.lab.eng.rdu.redhat.com:22
  client3: benchuser@benchclient3.perf.lab.eng.rdu.redhat.com:22

http:
- host: http://localhost:8080
- host: https://localhost:8443
phases:
- rampUp: # When forks are in this should create a no-op phase that will be started after all the forks
    increasingRate:
      initialUsersPerSec: 1
      targetUsersPerSec: 100
      duration: 3s
      forks:
        invalidRegistration: &invalidRegistration
          weight: 0.2
          scenario:
            initialSequences:
            - registerInvalid:
              - thinkTime:
                  duration: 1s
              # TODO
        validRegistration: &validRegistration
          weight: 0.8
          scenario:
            initialSequences:
            - registerInvalid:
              - thinkTime:
                  duration: 1s
              # TODO
        unregister: &unregister
          weight: 0.1
          scenario:
            # ordered sequences is just a syntax-sugar, this has no counterpart in programmatic configuration
            orderedSequences:
            - login: &login
              - thinkTime:
                  duration: 1s
              #TODO
            - unregister: &unregisterSeq
              - thinkTime:
                  duration: 1s
        viewUser: &viewUser
          weight: 1
          scenario:
            orderedSequences:
            - login: *login
            # Despite the anchor stores type and therfore we could overload the `viewUser`
            # for both forked scenario and sequence, YAML validators could have trouble with that.
            - viewUser: &viewUserSeq
              - thinkTime:
                  duration: 1s
            - logout: &logout
              - thinkTime:
                  duration: 1s
- steadyState:
    constantRate:
      usersPerSec: 100
      startAfter: rampUp
      duration: 6s
      forks:
        invalidRegistration: *invalidRegistration
        validRegistration: *validRegistration
        unregister: *unregister
        viewUser: *viewUser

#  sequences:
#    - registerInvalid:
#    - registerValid:
#    - login:
#    - logout:
#    - unregister:
#    - viewUser:
#    - updateUser:
#    - addVehicle:
#    - viewVehicle:
#    - viewQuote:
#    - deleteVehicle:
#    - acceptQuote:
#    - acceptQuoteWebSocket:
#    - viewInsurance:
#  scenarios:
#    - invalidRegistration:
#        sequences:
#          - registerInvalid
#    - registerValid:
#        sequences:
#          - registerValid
#    - unregister:
#        sequences:
#          - login
#          - unregister
#    - viewUser:
#        sequences:
#          - login
#          - viewUser
#          - logout
#    - updateUser:
#        sequences:
#          - login
#          - viewUser
#          - updateUser
#          - logout
#    - viewQuote:
#        sequences:
#          - login
#          - addVehicle
#          - viewQuote
#          - logout
#    - deleteVehicle:
#        sequences:
#          - login
#          - deleteVehicle
#          - logout
#    - acceptQuote:
#        sequences:
#          - login
#          - acceptQuote
#          - viewVehicle
#          - logout
#    - acceptQuoteWebSocket:
#        sequences:
#          - login
#          - acceptQuoteWebSocket
#          - viewVehicle
#          - logout
#    - viewInsurance:
#        sequences:
#          - login
#          - viewVehicle
#          - viewInsurance
#          - logout


#state:
#  - users:
#      supplier: CSV
#      location: users.csv
#  - vehicles:
#      supplier: REST
#      location:
#  - makes:
#      supplier: REST
#      location:
