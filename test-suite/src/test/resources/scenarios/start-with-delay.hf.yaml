name: benchmark using start with delay
http:
  host: http://localhost:8080
phases:
- rampUp: # start this load 4s after the steady state, for 4s they will run in parallel
    increasingRate:
      initialUsersPerSec: 1
      targetUsersPerSec: 100
      duration: 3s
      startWith:
        phase: steadyState
        delay: 4s
      scenario: &scenario
        initialSequences:
        - testSequence:
          - httpRequest:
              GET: /foo
              sync: false
              sla:
                meanResponseTime: 1s
                limits:
                  0.9: 2s
              handler:
                status:
                  counter:
                    expectStatus: 204
                    var: testCounter
                    init: 0
                    add: 1
          - set: foo <- bar
          - httpRequest:
              method: GET
              path: /foo
              sync: false
              headers:
              - Accept: text/plain
              - Foo:
                  fromVar: foo
              handler:
              # notice this is a list, for repeated invocations
              - status:
                  counter:
                    expectStatus: 204
                    var: testCounter
                    init: 0
                    add: 1
          - noop
          - awaitInt:
              var: testCounter
              greaterOrEqualTo: 2
          - scheduleDelay:
              key: k
              fromNow:
              duration: 5s

- steadyState:
    constantRate:
      usersPerSec: 100
      duration: 8s
      scenario: *scenario
